// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @unique
  email           String   @unique
  password        String
  picture         String?
  country         String?
  timezone        String?
  coins           Int      @default(10)
  lastLoginDate   DateTime @default(now())
  offeredSkills   String[]
  requestedSkills String[]
  createdAt       DateTime @default(now())

  userSessions              UserSession?
  skillswapRequestsCreated  SkillSwapRequest[]            @relation("RequesterRelation")
  skillswapRequestsAccepted SkillSwapRequest[]            @relation("AccepterRelation")
  chatMessages              SkillSwapSessionChatMessage[]
  asReviewer                Review[]                      @relation("ReviewerRelation")
  asReviewee                Review[]                      @relation("RevieweeRelation")

  @@map("users")
}

model Review {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  rating  Int
  comment String?

  reviewerId         String @db.ObjectId
  revieweeId         String @db.ObjectId
  skillswapSessionId String @db.ObjectId

  reviewer         User             @relation("ReviewerRelation", fields: [reviewerId], references: [id])
  reviewee         User             @relation("RevieweeRelation", fields: [revieweeId], references: [id])
  skillswapSession SkillSwapSession @relation(fields: [skillswapSessionId], references: [id])

  @@unique([reviewerId, skillswapSessionId])
  @@map("reviews")
}

model SkillSwapRequest {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  requesterTimezone String
  closed            Boolean    @default(false)
  closedAt          DateTime?
  requestedSkill    String
  createdAt         DateTime   @default(now())
  availability      Schedule[]

  requesterId      String            @db.ObjectId
  accepterId       String?           @db.ObjectId
  requester        User              @relation("RequesterRelation", fields: [requesterId], references: [id])
  accepter         User?             @relation("AccepterRelation", fields: [accepterId], references: [id])
  skillswapSession SkillSwapSession?

  @@map("skillswap_requests")
}

model Schedule {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime
  // startTime String
  // endTime   String

  skillswapRequestId String             @db.ObjectId
  skillswapRequest   SkillSwapRequest   @relation(fields: [skillswapRequestId], references: [id])
  skillswapSession   SkillSwapSession[]

  @@map("schedules")
}

model SkillSwapSession {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  status       ScheduleStatus @default(OPEN)
  offeredSkill String
  createdAt    DateTime       @default(now())

  scheduleId         String                        @db.ObjectId
  skillswapRequestId String                        @unique @db.ObjectId
  skillswapRequest   SkillSwapRequest              @relation(fields: [skillswapRequestId], references: [id])
  schedule           Schedule                      @relation(fields: [scheduleId], references: [id])
  chatMessages       SkillSwapSessionChatMessage[]
  review             Review[]

  @@map("skillswap_sessions")
}

model SkillSwapSessionChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  senderId           String           @db.ObjectId
  skillswapSessionId String           @db.ObjectId
  sender             User             @relation(fields: [senderId], references: [id])
  skillswapSession   SkillSwapSession @relation(fields: [skillswapSessionId], references: [id])

  @@map("skillswap_session_chat_messages")
}

model UserSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("user_sessions")
}

enum ScheduleStatus {
  OPEN
  ACCEPTED
  SCHEDULED
  FINISHED
  CLOSED
  CANCELLED
}

model Admin {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  password    String
  deactivated Boolean @default(false)
  deleted     Boolean @default(false)

  role AdminRole @default(ADMIN)
}

enum AdminRole {
  SUPERADMIN
  ADMIN
}
